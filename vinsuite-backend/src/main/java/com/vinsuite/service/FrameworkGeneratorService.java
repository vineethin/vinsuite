package com.vinsuite.service;

import com.vinsuite.dto.FrameworkConfigRequest;
import org.springframework.stereotype.Service;

import java.io.*;
import java.nio.file.*;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

@Service
public class FrameworkGeneratorService {

    public byte[] generateFramework(FrameworkConfigRequest config) throws IOException {
        // 1. Create a temp directory
        Path tempDir = Files.createTempDirectory("sample-framework");

        // 2. Add basic structure
        Path srcDir = tempDir.resolve("src");
        Files.createDirectories(srcDir);

        // 3. Create sample test file based on language/framework
        if ("java".equalsIgnoreCase(config.getLanguage())) {
            Path testFile = srcDir.resolve("SampleTest.java");
            String testCode = generateJavaTest(config.getTestFramework());
            Files.writeString(testFile, testCode);

            if ("maven".equalsIgnoreCase(config.getPackagingTool())) {
                Files.writeString(tempDir.resolve("pom.xml"), generateMavenPom(config));
            } else if ("gradle".equalsIgnoreCase(config.getPackagingTool())) {
                Files.writeString(tempDir.resolve("build.gradle"), generateGradleBuild(config));
            }
        }

        // 4. Add README.md
        Path readme = tempDir.resolve("README.md");
        String readmeContent = String.format("""
                # Sample Automation Framework

                **Language:** %s
                **Test Framework:** %s
                **Report Tool:** %s
                **Packaging Tool:** %s

                > This is a sample framework generated by VinSuite.
                """,
                config.getLanguage(),
                config.getTestFramework(),
                config.getReportTool(),
                config.getPackagingTool());
        Files.writeString(readme, readmeContent);

        // 5. Zip the directory
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        try (ZipOutputStream zos = new ZipOutputStream(byteArrayOutputStream)) {
            Files.walk(tempDir).filter(Files::isRegularFile).forEach(filePath -> {
                try {
                    String zipEntryPath = tempDir.relativize(filePath).toString();
                    zos.putNextEntry(new ZipEntry(zipEntryPath));
                    Files.copy(filePath, zos);
                    zos.closeEntry();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            });
        }

        // 6. Cleanup temp files
        deleteDirectory(tempDir.toFile());

        return byteArrayOutputStream.toByteArray();
    }

    private String generateJavaTest(String testFramework) {
        if ("junit".equalsIgnoreCase(testFramework)) {
            return """
                    import org.junit.jupiter.api.Test;
                    public class SampleTest {
                        @Test
                        void sample() {
                            System.out.println("✅ JUnit test executed!");
                        }
                    }
                    """;
        } else {
            return """
                    import org.testng.annotations.Test;
                    public class SampleTest {
                        @Test
                        public void example() {
                            System.out.println("✅ TestNG test executed!");
                        }
                    }
                    """;
        }
    }

    private String generateMavenPom(FrameworkConfigRequest config) {
        String reporter = switch (config.getReportTool().toLowerCase()) {
            case "allure" -> "<dependency>\n" +
                    "    <groupId>io.qameta.allure</groupId>\n" +
                    "    <artifactId>allure-testng</artifactId>\n" +
                    "    <version>2.20.1</version>\n" +
                    "</dependency>";
            case "logback" -> "<dependency>\n" +
                    "    <groupId>ch.qos.logback</groupId>\n" +
                    "    <artifactId>logback-classic</artifactId>\n" +
                    "    <version>1.4.11</version>\n" +
                    "</dependency>";
            default -> "";
        };

        return """
                <project xmlns="http://maven.apache.org/POM/4.0.0"
                         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                                             http://maven.apache.org/xsd/maven-4.0.0.xsd">
                    <modelVersion>4.0.0</modelVersion>
                    <groupId>com.vinsuite</groupId>
                    <artifactId>sample-framework</artifactId>
                    <version>1.0-SNAPSHOT</version>
                    <dependencies>
                        %s
                    </dependencies>
                </project>
                """.formatted(reporter);
    }

    private String generateGradleBuild(FrameworkConfigRequest config) {
        String reporter = switch (config.getReportTool().toLowerCase()) {
            case "allure" -> "implementation 'io.qameta.allure:allure-testng:2.20.1'";
            case "logback" -> "implementation 'ch.qos.logback:logback-classic:1.4.11'";
            default -> "";
        };

        return """
                plugins {
                    id 'java'
                }

                group 'com.vinsuite'
                version '1.0-SNAPSHOT'

                repositories {
                    mavenCentral()
                }

                dependencies {
                    %s
                }
                """.formatted(reporter);
    }

    private void deleteDirectory(File directoryToBeDeleted) {
        File[] allContents = directoryToBeDeleted.listFiles();
        if (allContents != null) {
            for (File file : allContents) {
                deleteDirectory(file);
            }
        }
        directoryToBeDeleted.delete();
    }
}
