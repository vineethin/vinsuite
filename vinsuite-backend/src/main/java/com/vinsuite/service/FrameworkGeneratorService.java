package com.vinsuite.service;

import com.vinsuite.dto.FrameworkConfigRequest;
import org.springframework.stereotype.Service;

import java.io.*;
import java.nio.file.*;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

@Service
public class FrameworkGeneratorService {

    public byte[] generateFramework(FrameworkConfigRequest config) throws IOException {
        // 1. Create a temp directory
        Path tempDir = Files.createTempDirectory("sample-framework");

        // 2. Add basic structure
        String base = config.getLanguage() + "-" + config.getTestFramework();
        Path srcDir = tempDir.resolve("src");
        Files.createDirectories(srcDir);

        // 3. Sample test file (for Java + TestNG example)
        if ("java".equalsIgnoreCase(config.getLanguage())) {
            Path testFile = srcDir.resolve("SampleTest.java");
            String testCode = """
                        import org.testng.annotations.Test;

                        public class SampleTest {
                            @Test
                            public void example() {
                                System.out.println("âœ… Sample test executed!");
                            }
                        }
                    """;
            Files.writeString(testFile, testCode);
        }

        // 4. Add README
        Path readme = tempDir.resolve("README.md");
        Files.writeString(readme, "# Sample Automation Framework\nGenerated by VinSuite!");

        // 5. Zip it all
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        try (ZipOutputStream zos = new ZipOutputStream(byteArrayOutputStream)) {
            Files.walk(tempDir).filter(Files::isRegularFile).forEach(filePath -> {
                try {
                    String zipEntryPath = tempDir.relativize(filePath).toString();
                    zos.putNextEntry(new ZipEntry(zipEntryPath));
                    Files.copy(filePath, zos);
                    zos.closeEntry();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            });
        }

        // Clean up temp directory
        deleteDirectory(tempDir.toFile());

        return byteArrayOutputStream.toByteArray();
    }

    private void deleteDirectory(File directoryToBeDeleted) {
        File[] allContents = directoryToBeDeleted.listFiles();
        if (allContents != null) {
            for (File file : allContents) {
                deleteDirectory(file);
            }
        }
        directoryToBeDeleted.delete();
    }
}
